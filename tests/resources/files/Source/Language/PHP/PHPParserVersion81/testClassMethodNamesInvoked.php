<?php
function foo($o) {
    $o->callable();
    $o->class();
    $o->trait();
    $o->extends();
    $o->implements();
    $o->static();
    $o->abstract();
    $o->final();
    $o->public();
    $o->protected();
    $o->private();
    $o->const();
    $o->enddeclare();
    $o->endfor();
    $o->endforeach();
    $o->endif();
    $o->endwhile();
    $o->and();
    $o->global();
    $o->goto();
    $o->instanceof();
    $o->insteadof();
    $o->interface();
    $o->namespace();
    $o->new();
    $o->or();
    $o->xor();
    $o->try();
    $o->use();
    $o->var();
    $o->exit();
    $o->list();
    $o->clone();
    $o->include();
    $o->include_once();
    $o->throw();
    $o->array();
    $o->print();
    $o->echo();
    $o->require();
    $o->require_once();
    $o->return();
    $o->else();
    $o->elseif();
    $o->default();
    $o->break();
    $o->continue();
    $o->switch();
    $o->yield();
    $o->function();
    $o->if();
    $o->endswitch();
    $o->finally();
    $o->for();
    $o->foreach();
    $o->declare();
    $o->case();
    $o->do();
    $o->while();
    $o->as();
    $o->catch();
    $o->die();
    $o->self();
    $o->parent();
    
    MyClass::callable();
    MyClass::class();
    MyClass::trait();
    MyClass::extends();
    MyClass::implements();
    MyClass::static();
    MyClass::abstract();
    MyClass::final();
    MyClass::public();
    MyClass::protected();
    MyClass::private();
    MyClass::const();
    MyClass::enddeclare();
    MyClass::endfor();
    MyClass::endforeach();
    MyClass::endif();
    MyClass::endwhile();
    MyClass::and();
    MyClass::global();
    MyClass::goto();
    MyClass::instanceof();
    MyClass::insteadof();
    MyClass::interface();
    MyClass::namespace();
    MyClass::new();
    MyClass::or();
    MyClass::xor();
    MyClass::try();
    MyClass::use();
    MyClass::var();
    MyClass::exit();
    MyClass::list();
    MyClass::clone();
    MyClass::include();
    MyClass::include_once();
    MyClass::throw();
    MyClass::array();
    MyClass::print();
    MyClass::echo();
    MyClass::require();
    MyClass::require_once();
    MyClass::return();
    MyClass::else();
    MyClass::elseif();
    MyClass::default();
    MyClass::break();
    MyClass::continue();
    MyClass::switch();
    MyClass::yield();
    MyClass::function();
    MyClass::if();
    MyClass::endswitch();
    MyClass::finally();
    MyClass::for();
    MyClass::foreach();
    MyClass::declare();
    MyClass::case();
    MyClass::do();
    MyClass::while();
    MyClass::as();
    MyClass::catch();
    MyClass::die();
    MyClass::self();
    MyClass::parent();
}
